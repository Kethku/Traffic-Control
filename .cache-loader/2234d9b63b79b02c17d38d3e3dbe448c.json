{"remainingRequest":"C:\\dev\\Projects\\TrafficControl\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!C:\\dev\\Projects\\TrafficControl\\node_modules\\ts-loader\\index.js??ref--4-2!C:\\dev\\Projects\\TrafficControl\\inputBox\\inputBox.ts","dependencies":[{"path":"C:\\dev\\Projects\\TrafficControl\\inputBox\\inputBox.ts","mtime":1522121880846},{"path":"C:\\dev\\Projects\\TrafficControl\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\dev\\Projects\\TrafficControl\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\dev\\Projects\\TrafficControl\\node_modules\\ts-loader\\index.js","mtime":1528433923000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst m = require(\"mithril\");\r\nrequire(\"./style.css\");\r\nrequire(\"./custom.css\");\r\nlet ipcRenderer = require('electron').ipcRenderer;\r\nlet boxStyle = \".bg-gray-transparent.outline-0.ma0.f4.code.w-100.light-silver\";\r\nlet text = \"\";\r\nlet overwriteText = \"\";\r\nlet completions = [];\r\nlet selectedIndex = 0;\r\nfunction focus(vnode) {\r\n    vnode.dom.focus();\r\n}\r\nlet Input = {\r\n    view: () => {\r\n        let properties = { oncreate: focus, onupdate: focus, onkeydown: m.withAttr(\"value\", (value) => {\r\n                if (value !== text) {\r\n                    text = value;\r\n                    setTimeout(() => {\r\n                        ipcRenderer.send(\"inputBoxChanged\", value);\r\n                    });\r\n                }\r\n            }) };\r\n        if (overwriteText) {\r\n            properties.value = overwriteText;\r\n            overwriteText = null;\r\n        }\r\n        return m(\"input.pa3.b--none\" + boxStyle, properties);\r\n    }\r\n};\r\nlet Completions = {\r\n    view: () => {\r\n        if (completions.length > 0) {\r\n            let renderedCompletions = [];\r\n            for (let i = 0; i < completions.length; i++) {\r\n                let highlightStyle = \"\";\r\n                if (i == selectedIndex) {\r\n                    highlightStyle = \".bt.bb.bw1.b--white-40\";\r\n                }\r\n                renderedCompletions.push(m(\"div.pa2\" + boxStyle + highlightStyle, completions[i]));\r\n            }\r\n            return m('div', renderedCompletions);\r\n        }\r\n    }\r\n};\r\nlet InputBar = {\r\n    view: () => {\r\n        return m(\"div\", [\r\n            m(Input),\r\n            m(Completions)\r\n        ]);\r\n    }\r\n};\r\nipcRenderer.on(\"completions\", (event, newCompletions) => {\r\n    completions = newCompletions;\r\n    m.redraw();\r\n});\r\ndocument.onkeydown = function (evt) {\r\n    if (evt.key == \"Escape\") {\r\n        ipcRenderer.send(\"hideInputBox\");\r\n    }\r\n    else if (evt.key == \"j\" && evt.ctrlKey) {\r\n        selectedIndex++;\r\n        if (selectedIndex > completions.length - 1) {\r\n            selectedIndex = 0;\r\n        }\r\n    }\r\n    else if (evt.key == \"k\" && evt.ctrlKey) {\r\n        selectedIndex--;\r\n        if (selectedIndex < 0) {\r\n            selectedIndex = completions.length - 1;\r\n        }\r\n    }\r\n    else if (evt.key == \"Tab\") {\r\n        let braceSubstitution = /{.*}/;\r\n        overwriteText = completions[selectedIndex];\r\n        overwriteText = overwriteText.replace(braceSubstitution, \"\");\r\n        m.redraw();\r\n        evt.preventDefault();\r\n    }\r\n    else if (evt.key == \"Enter\") {\r\n        ipcRenderer.send(\"inputSent\", text);\r\n        ipcRenderer.send(\"hideInputBox\");\r\n    }\r\n};\r\nm.mount(document.body, InputBar);\r\n",{"version":3,"file":"C:\\dev\\Projects\\TrafficControl\\inputBox\\inputBox.ts","sourceRoot":"","sources":["C:\\dev\\Projects\\TrafficControl\\inputBox\\inputBox.ts"],"names":[],"mappings":"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","sourcesContent":["import * as m from \"mithril\";\r\nimport \"./style.css\";\r\nimport \"./custom.css\";\r\n\r\nlet ipcRenderer = require('electron').ipcRenderer;\r\n\r\nlet boxStyle = \".bg-gray-transparent.outline-0.ma0.f4.code.w-100.light-silver\"\r\n\r\nlet text = \"\";\r\nlet overwriteText = \"\";\r\nlet completions: string[] = [];\r\nlet selectedIndex: number = 0;\r\n\r\nfunction focus(vnode: any) {\r\n  vnode.dom.focus();\r\n}\r\n\r\nlet Input = {\r\n  view: () => {\r\n    let properties: any = {oncreate: focus, onupdate: focus, onkeydown: m.withAttr(\"value\", (value) => {\r\n      if (value !== text) {\r\n        text = value;\r\n        setTimeout(() => {\r\n          ipcRenderer.send(\"inputBoxChanged\", value);\r\n        });\r\n      }\r\n    })};\r\n    if (overwriteText) {\r\n      properties.value = overwriteText;\r\n      overwriteText = null;\r\n    }\r\n    return m(\"input.pa3.b--none\" + boxStyle, properties);\r\n  }\r\n}\r\n\r\nlet Completions = {\r\n  view: () => {\r\n    if (completions.length > 0) {\r\n      let renderedCompletions = [];\r\n      for (let i = 0; i < completions.length; i++) {\r\n        let highlightStyle = \"\";\r\n        if (i == selectedIndex) {\r\n          highlightStyle = \".bt.bb.bw1.b--white-40\";\r\n        }\r\n        renderedCompletions.push(m(\"div.pa2\" + boxStyle + highlightStyle, completions[i]));\r\n      }\r\n      return m('div', renderedCompletions);\r\n    }\r\n  }\r\n}\r\n\r\nlet InputBar = {\r\n  view: () => {\r\n    return m(\"div\", [\r\n      m(Input),\r\n      m(Completions)\r\n    ]);\r\n  }\r\n}\r\n\r\nipcRenderer.on(\"completions\", (event: any, newCompletions: string[]) => {\r\n  completions = newCompletions;\r\n  m.redraw();\r\n});\r\n\r\ndocument.onkeydown = function(evt) {\r\n  if (evt.key == \"Escape\") {\r\n    ipcRenderer.send(\"hideInputBox\");\r\n  } else if (evt.key == \"j\" && evt.ctrlKey) {\r\n    selectedIndex ++;\r\n    if (selectedIndex > completions.length - 1) {\r\n      selectedIndex = 0;\r\n    }\r\n  } else if (evt.key == \"k\" && evt.ctrlKey) {\r\n    selectedIndex --;\r\n    if (selectedIndex < 0) {\r\n      selectedIndex = completions.length - 1;\r\n    }\r\n  } else if (evt.key == \"Tab\") {\r\n    let braceSubstitution = /{.*}/;\r\n    overwriteText = completions[selectedIndex];\r\n    overwriteText = overwriteText.replace(braceSubstitution, \"\");\r\n\r\n    m.redraw();\r\n    evt.preventDefault();\r\n  } else if (evt.key == \"Enter\") {\r\n    ipcRenderer.send(\"inputSent\", text);\r\n    ipcRenderer.send(\"hideInputBox\");\r\n  }\r\n};\r\n\r\nm.mount(document.body, InputBar);\r\n"]}]}