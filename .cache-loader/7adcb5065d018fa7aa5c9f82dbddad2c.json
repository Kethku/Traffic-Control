{"remainingRequest":"C:\\dev\\Projects\\TrafficControl\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!C:\\dev\\Projects\\TrafficControl\\node_modules\\ts-loader\\index.js??ref--4-2!C:\\dev\\Projects\\TrafficControl\\server\\eventManager.ts","dependencies":[{"path":"C:\\dev\\Projects\\TrafficControl\\server\\eventManager.ts","mtime":1522121880862},{"path":"C:\\dev\\Projects\\TrafficControl\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\dev\\Projects\\TrafficControl\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\dev\\Projects\\TrafficControl\\node_modules\\ts-loader\\index.js","mtime":1528433923000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass EventManager0 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Publish() {\r\n        let promises = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            promises.push(Promise.resolve(sub()));\r\n        }\r\n        return Promise.all(promises);\r\n    }\r\n}\r\nexports.EventManager0 = EventManager0;\r\nclass EventManager1 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Publish(arg) {\r\n        let promises = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            promises.push(Promise.resolve(sub(arg)));\r\n        }\r\n        return Promise.all(promises);\r\n    }\r\n}\r\nexports.EventManager1 = EventManager1;\r\nclass EventManager2 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Publish(arg1, arg2) {\r\n        let promises = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            promises.push(Promise.resolve(sub(arg1, arg2)));\r\n        }\r\n        return Promise.all(promises);\r\n    }\r\n}\r\nexports.EventManager2 = EventManager2;\r\nclass EventManager3 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Publish(arg1, arg2, arg3) {\r\n        let promises = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            promises.push(Promise.resolve(sub(arg1, arg2, arg3)));\r\n        }\r\n        return Promise.all(promises);\r\n    }\r\n}\r\nexports.EventManager3 = EventManager3;\r\nclass EventManager4 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Publish(arg1, arg2, arg3, arg4) {\r\n        let promises = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            promises.push(Promise.resolve(sub(arg1, arg2, arg3, arg4)));\r\n        }\r\n        return Promise.all(promises);\r\n    }\r\n}\r\nexports.EventManager4 = EventManager4;\r\nclass EventManager5 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Publish(arg1, arg2, arg3, arg4, arg5) {\r\n        let promises = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            promises.push(Promise.resolve(sub(arg1, arg2, arg3, arg4, arg5)));\r\n        }\r\n        return Promise.all(promises);\r\n    }\r\n}\r\nexports.EventManager5 = EventManager5;\r\nclass PollManager0 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Poll() {\r\n        let result = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            result.push(Promise.resolve(sub()));\r\n        }\r\n        return Promise.all(result);\r\n    }\r\n}\r\nexports.PollManager0 = PollManager0;\r\nclass PollManager1 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Poll(arg) {\r\n        let result = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            result.push(Promise.resolve(sub(arg)));\r\n        }\r\n        return Promise.all(result);\r\n    }\r\n}\r\nexports.PollManager1 = PollManager1;\r\nclass PollManager2 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Poll(arg1, arg2) {\r\n        let result = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            result.push(Promise.resolve(sub(arg1, arg2)));\r\n        }\r\n        return Promise.all(result);\r\n    }\r\n}\r\nexports.PollManager2 = PollManager2;\r\nclass PollManager3 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Poll(arg1, arg2, arg3) {\r\n        let result = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            result.push(Promise.resolve(sub(arg1, arg2, arg3)));\r\n        }\r\n        return Promise.all(result);\r\n    }\r\n}\r\nexports.PollManager3 = PollManager3;\r\nclass PollManager4 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Poll(arg1, arg2, arg3, arg4) {\r\n        let result = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            result.push(Promise.resolve(sub(arg1, arg2, arg3, arg4)));\r\n        }\r\n        return Promise.all(result);\r\n    }\r\n}\r\nexports.PollManager4 = PollManager4;\r\nclass PollManager5 {\r\n    constructor() {\r\n        this.currentId = 0;\r\n        this.subscriptions = {};\r\n    }\r\n    Subscribe(callback) {\r\n        this.subscriptions[this.currentId] = callback;\r\n        let id = this.currentId;\r\n        this.currentId++;\r\n        return id;\r\n    }\r\n    Unsubscribe(id) {\r\n        delete this.subscriptions[id];\r\n    }\r\n    Poll(arg1, arg2, arg3, arg4, arg5) {\r\n        let result = [];\r\n        for (let id in this.subscriptions) {\r\n            let sub = this.subscriptions[id];\r\n            result.push(Promise.resolve(sub(arg1, arg2, arg3, arg4, arg5)));\r\n        }\r\n        return Promise.all(result);\r\n    }\r\n}\r\nexports.PollManager5 = PollManager5;\r\n",{"version":3,"file":"C:\\dev\\Projects\\TrafficControl\\server\\eventManager.ts","sourceRoot":"","sources":["C:\\dev\\Projects\\TrafficControl\\server\\eventManager.ts"],"names":[],"mappings":"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","sourcesContent":["export interface EventManager {\r\n  Subscribe(callback: (...args: any[]) => void): number;\r\n  Unsubscribe(id: number): void;\r\n  Publish(...args: any[]): Promise<void[]>;\r\n}\r\n\r\nexport class EventManager0 implements EventManager {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: () => void | Promise<void> } = { };\r\n\r\n  Subscribe(callback: () => void | Promise<void>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Publish() {\r\n    let promises: Promise<void>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      promises.push(Promise.resolve(sub()));\r\n    }\r\n    return Promise.all(promises);\r\n  }\r\n}\r\n\r\nexport class EventManager1<A> implements EventManager {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg: A) => void | Promise<void> } = { };\r\n\r\n  Subscribe(callback: (arg: A) => void | Promise<void>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Publish(arg: A) {\r\n    let promises: Promise<void>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      promises.push(Promise.resolve(sub(arg)));\r\n    }\r\n    return Promise.all(promises);\r\n  }\r\n}\r\n\r\nexport class EventManager2<A1, A2> implements EventManager {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg1: A1, arg2: A2) => void | Promise<void> } = { };\r\n\r\n  Subscribe(callback: (arg1: A1, arg2: A2) => void | Promise<void>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Publish(arg1: A1, arg2: A2) {\r\n    let promises: Promise<void>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      promises.push(Promise.resolve(sub(arg1, arg2)));\r\n    }\r\n    return Promise.all(promises);\r\n  }\r\n}\r\n\r\nexport class EventManager3<A1, A2, A3> implements EventManager {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg1: A1, arg2: A2, arg3: A3) => void | Promise<void> } = { };\r\n\r\n  Subscribe(callback: (arg1: A1, arg2: A2, arg3: A3) => void | Promise<void>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Publish(arg1: A1, arg2: A2, arg3: A3) {\r\n    let promises: Promise<void>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      promises.push(Promise.resolve(sub(arg1, arg2, arg3)));\r\n    }\r\n    return Promise.all(promises);\r\n  }\r\n}\r\n\r\nexport class EventManager4<A1, A2, A3, A4> implements EventManager {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => void | Promise<void> } = { };\r\n\r\n  Subscribe(callback: (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => void | Promise<void>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Publish(arg1: A1, arg2: A2, arg3: A3, arg4: A4) {\r\n    let promises: Promise<void>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      promises.push(Promise.resolve(sub(arg1, arg2, arg3, arg4)));\r\n    }\r\n    return Promise.all(promises);\r\n  }\r\n}\r\n\r\nexport class EventManager5<A1, A2, A3, A4, A5> implements EventManager {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => void | Promise<void> } = { };\r\n\r\n  Subscribe(callback: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => void | Promise<void>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Publish(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) {\r\n    let promises: Promise<void>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      promises.push(Promise.resolve(sub(arg1, arg2, arg3, arg4, arg5)));\r\n    }\r\n    return Promise.all(promises);\r\n  }\r\n}\r\n\r\nexport interface PollManager<R> {\r\n  Subscribe(callback: (...args: any[]) => R | Promise<R>): number;\r\n  Unsubscribe(id: number): void;\r\n  Poll(...args: any[]): Promise<R[]>;\r\n}\r\n\r\nexport class PollManager0<R> implements PollManager<R> {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: () => R | Promise<R> } = { };\r\n\r\n  Subscribe(callback: () => R | Promise<R>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Poll() {\r\n    let result: Promise<R>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      result.push(Promise.resolve(sub()));\r\n    }\r\n    return Promise.all(result);\r\n  }\r\n}\r\n\r\nexport class PollManager1<A, R> implements PollManager<R> {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg: A) => R | Promise<R> } = { };\r\n\r\n  Subscribe(callback: (arg: A) => R | Promise<R>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Poll(arg: A) {\r\n    let result: Promise<R>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      result.push(Promise.resolve(sub(arg)));\r\n    }\r\n    return Promise.all(result);\r\n  }\r\n}\r\n\r\nexport class PollManager2<A1, A2, R> implements PollManager<R> {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg1: A1, arg2: A2) => R | Promise<R> } = { };\r\n\r\n  Subscribe(callback: (arg1: A1, arg2: A2) => R | Promise<R>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Poll(arg1: A1, arg2: A2) {\r\n    let result: Promise<R>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      result.push(Promise.resolve(sub(arg1, arg2)));\r\n    }\r\n    return Promise.all(result);\r\n  }\r\n}\r\n\r\nexport class PollManager3<A1, A2, A3, R> implements PollManager<R> {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg1: A1, arg2: A2, arg3: A3) => R | Promise<R> } = { };\r\n\r\n  Subscribe(callback: (arg1: A1, arg2: A2, arg3: A3) => R | Promise<R>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Poll(arg1: A1, arg2: A2, arg3: A3) {\r\n    let result: Promise<R>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      result.push(Promise.resolve(sub(arg1, arg2, arg3)));\r\n    }\r\n    return Promise.all(result);\r\n  }\r\n}\r\n\r\nexport class PollManager4<A1, A2, A3, A4, R> implements PollManager<R> {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => R | Promise<R> } = { };\r\n\r\n  Subscribe(callback: (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => R | Promise<R>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Poll(arg1: A1, arg2: A2, arg3: A3, arg4: A4) {\r\n    let result: Promise<R>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      result.push(Promise.resolve(sub(arg1, arg2, arg3, arg4)));\r\n    }\r\n    return Promise.all(result);\r\n  }\r\n}\r\n\r\nexport class PollManager5<A1, A2, A3, A4, A5, R> implements PollManager<R> {\r\n  currentId = 0;\r\n  subscriptions: { [id: number]: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => R | Promise<R> } = { };\r\n\r\n  Subscribe(callback: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => R | Promise<R>) {\r\n    this.subscriptions[this.currentId] = callback;\r\n    let id = this.currentId;\r\n    this.currentId++;\r\n    return id;\r\n  }\r\n\r\n  Unsubscribe(id: number) {\r\n    delete this.subscriptions[id];\r\n  }\r\n\r\n  Poll(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) {\r\n    let result: Promise<R>[] = [];\r\n    for (let id in this.subscriptions) {\r\n      let sub = this.subscriptions[id];\r\n      result.push(Promise.resolve(sub(arg1, arg2, arg3, arg4, arg5)));\r\n    }\r\n    return Promise.all(result);\r\n  }\r\n}\r\n"]}]}