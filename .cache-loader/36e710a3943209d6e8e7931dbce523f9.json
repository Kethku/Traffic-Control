{"remainingRequest":"C:\\dev\\Projects\\TrafficControl\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!C:\\dev\\Projects\\TrafficControl\\node_modules\\ts-loader\\index.js??ref--4-2!C:\\dev\\Projects\\TrafficControl\\server\\inputBox.ts","dependencies":[{"path":"C:\\dev\\Projects\\TrafficControl\\server\\inputBox.ts","mtime":1529636837861},{"path":"C:\\dev\\Projects\\TrafficControl\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\dev\\Projects\\TrafficControl\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\dev\\Projects\\TrafficControl\\node_modules\\ts-loader\\index.js","mtime":1528433923000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst electron_1 = require(\"electron\");\r\nconst path = require(\"path\");\r\nconst eventManager_1 = require(\"./eventManager\");\r\nconst debugManager = require(\"./debugManager\");\r\nlet inputBoxWindow;\r\nexports.InputRecieved = new eventManager_1.EventManager1();\r\nexports.ProduceCompletions = new eventManager_1.PollManager1();\r\nfunction closeInputBox() {\r\n    if (inputBoxWindow) {\r\n        inputBoxWindow.destroy();\r\n        inputBoxWindow = null;\r\n    }\r\n}\r\nexports.closeInputBox = closeInputBox;\r\nfunction createInputBox() {\r\n    closeInputBox();\r\n    let display = electron_1.screen.getDisplayNearestPoint(electron_1.screen.getCursorScreenPoint());\r\n    inputBoxWindow = new electron_1.BrowserWindow({\r\n        skipTaskbar: true,\r\n        transparent: true,\r\n        alwaysOnTop: true,\r\n        thickFrame: true,\r\n        frame: false,\r\n        useContentSize: true,\r\n        show: false\r\n    });\r\n    inputBoxWindow.loadURL(path.join(debugManager.host, \"inputBox/inputBox.html\"));\r\n    inputBoxWindow.setBounds(display.bounds);\r\n    inputBoxWindow.setIgnoreMouseEvents(true);\r\n    inputBoxWindow.once('ready-to-show', () => {\r\n        inputBoxWindow.show();\r\n    });\r\n    inputBoxWindow.on('blur', () => {\r\n        if (!inputBoxWindow.webContents.isDevToolsFocused()) {\r\n            closeInputBox();\r\n        }\r\n    });\r\n    return inputBoxWindow;\r\n}\r\nexports.createInputBox = createInputBox;\r\nfunction createDebugInputBox() {\r\n    let window = createInputBox();\r\n    window.webContents.openDevTools({ mode: \"detach\" });\r\n    window.setSkipTaskbar(false);\r\n}\r\nexports.createDebugInputBox = createDebugInputBox;\r\nfunction setup() {\r\n    electron_1.globalShortcut.register('Ctrl+Space', createInputBox);\r\n    electron_1.globalShortcut.register('Ctrl+Alt+Space', createDebugInputBox);\r\n    electron_1.ipcMain.on('hideInputBox', closeInputBox);\r\n    electron_1.ipcMain.on('inputBoxChanged', (event, currentText) => __awaiter(this, void 0, void 0, function* () {\r\n        let completions = (yield exports.ProduceCompletions.Poll(currentText)).filter(x => x != undefined);\r\n        if (completions) {\r\n            event.sender.send('completions', completions);\r\n        }\r\n    }));\r\n    electron_1.ipcMain.on('inputSent', (event, text) => __awaiter(this, void 0, void 0, function* () {\r\n        exports.InputRecieved.Publish(text);\r\n    }));\r\n}\r\nexports.default = setup;\r\n",{"version":3,"file":"C:\\dev\\Projects\\TrafficControl\\server\\inputBox.ts","sourceRoot":"","sources":["C:\\dev\\Projects\\TrafficControl\\server\\inputBox.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uCAAwE;AACxE,6BAA6B;AAG7B,iDAA2D;AAC3D,+CAA+C;AAE/C,IAAI,cAAsC,CAAC;AAEhC,QAAA,aAAa,GAAG,IAAI,4BAAa,EAAU,CAAC;AAC5C,QAAA,kBAAkB,GAAG,IAAI,2BAAY,EAAkB,CAAC;AAEnE;IACE,IAAI,cAAc,EAAE;QAClB,cAAc,CAAC,OAAO,EAAE,CAAC;QACzB,cAAc,GAAG,IAAI,CAAC;KACvB;AACH,CAAC;AALD,sCAKC;AAED;IACE,aAAa,EAAE,CAAC;IAChB,IAAI,OAAO,GAAG,iBAAM,CAAC,sBAAsB,CAAC,iBAAM,CAAC,oBAAoB,EAAE,CAAC,CAAC;IAE3E,cAAc,GAAG,IAAI,wBAAa,CAAC;QACjC,WAAW,EAAE,IAAI;QACjB,WAAW,EAAE,IAAI;QACjB,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,IAAI;QAChB,KAAK,EAAE,KAAK;QACZ,cAAc,EAAE,IAAI;QACpB,IAAI,EAAE,KAAK;KACZ,CAAC,CAAC;IAEH,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,wBAAwB,CAAC,CAAC,CAAC;IAC/E,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAE1C,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;QACxC,cAAc,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;QAC7B,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,iBAAiB,EAAE,EAAE;YACnD,aAAa,EAAE,CAAC;SACjB;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC;AACxB,CAAC;AA7BD,wCA6BC;AAED;IACE,IAAI,MAAM,GAAG,cAAc,EAAE,CAAC;IAC9B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;IAClD,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC;AAJD,kDAIC;AAED;IACE,yBAAc,CAAC,QAAQ,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IACtD,yBAAc,CAAC,QAAQ,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;IAE/D,kBAAO,CAAC,EAAE,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;IAC1C,kBAAO,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAO,KAAU,EAAE,WAAgB,EAAE,EAAE;QACnE,IAAI,WAAW,GAAG,CAAC,MAAM,0BAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC;QAC3F,IAAI,WAAW,EAAE;YACf,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;SAC/C;IACH,CAAC,CAAA,CAAC,CAAC;IACH,kBAAO,CAAC,EAAE,CAAC,WAAW,EAAE,CAAO,KAAU,EAAE,IAAS,EAAE,EAAE;QACtD,qBAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAA,CAAC,CAAC;AACL,CAAC;AAdD,wBAcC","sourcesContent":["import {BrowserWindow, screen, ipcMain, globalShortcut} from \"electron\";\r\nimport * as path from 'path';\r\nimport * as url from 'url';\r\n\r\nimport {EventManager1, PollManager1} from \"./eventManager\";\r\nimport * as debugManager from \"./debugManager\";\r\n\r\nlet inputBoxWindow: Electron.BrowserWindow;\r\n\r\nexport var InputRecieved = new EventManager1<string>();\r\nexport var ProduceCompletions = new PollManager1<string, string>();\r\n\r\nexport function closeInputBox() {\r\n  if (inputBoxWindow) {\r\n    inputBoxWindow.destroy();\r\n    inputBoxWindow = null;\r\n  }\r\n}\r\n\r\nexport function createInputBox() {\r\n  closeInputBox();\r\n  let display = screen.getDisplayNearestPoint(screen.getCursorScreenPoint());\r\n\r\n  inputBoxWindow = new BrowserWindow({\r\n    skipTaskbar: true,\r\n    transparent: true,\r\n    alwaysOnTop: true,\r\n    thickFrame: true,\r\n    frame: false,\r\n    useContentSize: true,\r\n    show: false\r\n  });\r\n\r\n  inputBoxWindow.loadURL(path.join(debugManager.host, \"inputBox/inputBox.html\"));\r\n  inputBoxWindow.setBounds(display.bounds);\r\n  inputBoxWindow.setIgnoreMouseEvents(true);\r\n\r\n  inputBoxWindow.once('ready-to-show', () => {\r\n    inputBoxWindow.show();\r\n  });\r\n\r\n  inputBoxWindow.on('blur', () => {\r\n    if (!inputBoxWindow.webContents.isDevToolsFocused()) {\r\n      closeInputBox();\r\n    }\r\n  });\r\n\r\n  return inputBoxWindow;\r\n}\r\n\r\nexport function createDebugInputBox() {\r\n  let window = createInputBox();\r\n  window.webContents.openDevTools({mode: \"detach\"});\r\n  window.setSkipTaskbar(false);\r\n}\r\n\r\nexport default function setup() {\r\n  globalShortcut.register('Ctrl+Space', createInputBox);\r\n  globalShortcut.register('Ctrl+Alt+Space', createDebugInputBox);\r\n\r\n  ipcMain.on('hideInputBox', closeInputBox);\r\n  ipcMain.on('inputBoxChanged', async (event: any, currentText: any) => {\r\n    let completions = (await ProduceCompletions.Poll(currentText)).filter(x => x != undefined);\r\n    if (completions) {\r\n      event.sender.send('completions', completions);\r\n    }\r\n  });\r\n  ipcMain.on('inputSent', async (event: any, text: any) => {\r\n    InputRecieved.Publish(text);\r\n  });\r\n}\r\n"]}]}